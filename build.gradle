plugins {
    id 'java'
    id 'io.qameta.allure' version '2.11.2'
    id 'io.freefair.lombok' version '8.12.1'
}

sourceCompatibility = '17'
targetCompatibility = '17'

repositories {
    mavenCentral()
}

def allureVersion = "2.27.0",
restAssuredVersion = "5.5.0"

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}


dependencies {
    testImplementation(
            "com.codeborne:selenide:7.5.1",
            "org.junit.jupiter:junit-jupiter:5.11.4",
            "org.slf4j:slf4j-simple:2.0.7",
            "com.github.javafaker:javafaker:1.0.2",
            "com.codeborne:pdf-test:1.5.0",
            "commons-io:commons-io:2.18.0",
            "com.codeborne:xls-test:1.4.3",
            "com.opencsv:opencsv:5.9",
            "com.fasterxml.jackson.core:jackson-core:2.13.1",
            "com.fasterxml.jackson.core:jackson-databind:2.16.0",
            "com.fasterxml.jackson.core:jackson-annotations:2.16.0",
            "org.assertj:assertj-core:3.27.3",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "io.rest-assured:json-schema-validator:$restAssuredVersion",
            "org.aeonbits.owner:owner:1.0.4"

    )
}

compileJava {
    options.encoding = 'UTF-8'
}
compileTestJava {
    options.encoding = 'UTF-8'
}


tasks.withType(Test) {
    useJUnitPlatform()
    systemProperties(System.getProperties())

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task demoqa_regress(type: Test) {
    useJUnitPlatform {
        includeTags("REGRESS")
    }
}

task demoqa_negative(type: Test) {
    useJUnitPlatform {
        includeTags("NEGATIVE")
    }
}

task demoqa_smoke(type: Test) {
    useJUnitPlatform {
        includeTags("SMOKE")
    }
}

task api_tests(type: Test) {
    useJUnitPlatform {
        includeTags("API")
    }
}