package guru.qa;

import java.util.List;

public class FirstClass {

    public static void main(String... args) {
        // Целочисленные типы
        byte aByte = 0; // 8b   -128 + 127
        short aShort = 0; // 16b -32768 +32767
        int aInt = 0; // 32b   (-2^32) .. (+2^32 -1)
        Integer intWrapper = 0;
        long aLong = 0L; // 64b
        // Типы с плавающей точкой
        float aFloat = 0.0F;
        double aDouble = 0.0;
        Double doubleWrapper = 9.1;
        // Символьный
        char aChar = 'a';
        Character charWrapper = 'a';
        // Логически тип
        boolean aBoolean = true;
        Boolean booleanWrapper = true;
        // Строка (и бесконечность других объектных/ссылочных типов)
        String toBePrint = "Hello world!";
        List<Integer> teachers = List.of(10, 20);

        // Операторы
        // Оператор присвоения =
        String nameFirst = "Dmitrii";
        int age = 34;
        String nameSecond = "Dmitrii";
        // Арифметические операторы + - / * % ++ --
        int result = aInt;

        // Операторы сравнения <, >, >=, <=, !=, ==

        // Логические операторы &, |, &&, ||, !

//    System.out.println(!(nameFirst.equals("Dmitrii")));

        // Оператор instanceof

        System.out.println(nameFirst instanceof  String);

        // Тернарный оператор

        char sex = 'm';

        String childName = sex == 'm'
                ? "Valentin"
                : "Valentina";

        // Управляющая конструкция if

        if (sex == 'm') {
            childName = "Valentin";
        } else if (sex == 'w') {
            childName = "Valentina";
        } else {
            System.out.println("((");
        }

        // ключевое слово new

        String name = new String("Dima");


    }
}

//Класс в джаве это описание нового типа данных
//Данные, типом которых является класс, называются объектом
//ООП - взаимодействие объектов

//Для создания нового объекта нужно испоьзовать слово new
//String это единственный объект который может быть создан без ключевого слова new

//New "резервирует" память под данные в новом классе. И отдает "адрес" памяти, где будет указано значение по умолчанию
//String = null, int = 0, boolean = false

//String name = "Masha"
//это литерал. Если такая строчка будет указана в разных местах программы несколько раз, то это будет занимать 1 единицу памяти
//а если создавать строчку через new, то даже при одинаковом значении это будут разные объекты

//Перегрузка оператора: возможность наделить оператор другим поведением, нежеле заложено ему по умолчанию
//Например плюс+ для склеивания строк (конкатинация)

//поля класса - составные части класса
//Статические методы могут быть вызваны путем добавления статического импорта. Не нужно создавать никакой объект через new, чтобы его вызывать
//но под капотом этих методов много new

//@Override - переопределение метода

//инкапсуляция - сделать поля приватными, чтобы нельзя было к ним напраямую обратиться. Нужно сделать getter and setter

//проблема мутабельности объектов. Лучше определять объект при создании, а если ему нужны другие характеристики, то лучше создать новый объект

//конструктор - способ передать в объект начальное состояние. Это вид метода (статический). Называется также как класс
//this = ссылка на этот объект

//this.name = name
слева от равно это поле класса, в котором есть этот конструктор
        справа - параметр, который передается на вход конструктору

//конструктор по умолчанию автоматически создается в каждом классе, он ничего не принимает на вход
//создает просто дефолтное состояние
//если создавать конструктор, то конструктор по умолчанию удалиться и нужно в new передать параметры, которые пойдут на вход в конструктор

//final - мы не можем присвоить переменной другой объект, это зафиксированное состояние, нельзя использовать setter

//Статический метод - не привязан к объекту класса, его можно вызвать через ссылку на класс. Это просто именнованая функция, процедура
//он ничего не знаект про объекты

//передача данных по значению
//создается копия этих данных и метод, который получил их на вход, имеет дело с копией

//передача данных по ссылке
//даем методу адрес, где лежат данные
//данные могут быть испорчены, в отличие от способа по значению

//в джаве все всегда передается по значению, НО
//что является значением в джаве? для примитивных значений это просто заданное значение (и мы копируем его)
//но есть ссылочные типы данных и мы копируем именно их (например с массивом строк)

//передача по ссылке в джаве технически не реализована


ЦИКЛЫ
        for (int i = 0; i<5; i=i+1) {

        }

        //int i = 0 начальное состояние при первом входе в цикл
//i<5 условие продолжения цикла
//i=i+1 действие при каждом входе в цикл на изменение индекса
//i++ прибавить 1
//i-- вычесть 1


for (создаем переменную с типом данных из массива:массив){
    выводим перменную слева
        }


do {

                } while ()

                    //разница с обычный while в том, когда мы выполняем проверки. Во втором случае мы сначала выполняем действие, а уже потом проверяем


                    break; для прерывания цикла
continue; для прерывание итерации
return; выход из метода (и из цикла тоже, если метод состоит из цикла)




ООП

Класс в джаве это описание структуры данных
Структура данных - комбинация разных типов данных (и их взаимодействие)

Написание классов = создание новых типов данных

У джавы есть 8 встроенных типов данных (примитывы):
- число простое (int, short, long, byte)
- число с плавующей точкой (float, double)
- boolean
- символьный (char)

Есть еще массивы (с разными типами данных)
String - это уже класс (не встроенный, но он такой универсальный и нужный, что для него делается исключение)


Иерархия объектов - есть общие объекты, есть более конкретные

Метод это аналог функции, это логика поведения

abstract
абстрактные методы могут быть только у абстрактных классов
